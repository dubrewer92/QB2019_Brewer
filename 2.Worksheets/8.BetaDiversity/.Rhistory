b.w <- round(S/a.bar, 3)
return(b.w)
}
beta.w <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE){
if (pairwise == TRUE){
if (sitenum == "1" | sitenum2 == ""){
print("Error: please specify sites to compare")
return(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.w = round(s/a.bar - 1, 3)
return(b.w)
}
else{
SbyS.pa <- decostand(site.by.species, method = "pa")
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])
a.bar <- mean(specnumber(SbyS.pa))
b.w <- round(s/a.bar - 1, 3)
return(b.w)
}
}
beta.w(doubs)
beta.w <- function(site.by.species = ""){
SbyS.pa <- decostand(site.by.species, method = "pa")
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])
a.bar <- mean(specnumber(SbyS.pa))
b.w <- round(S/a.bar, 3)
return(b.w)
}
beta.w <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE){
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == ""){
print("Error: please specify sites to compare")
return(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.w = round(s/a.bar - 1, 3)
return(b.w)
}
else{
SbyS.pa <- decostand(site.by.species, method = "pa")
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])
a.bar <- mean(specnumber(SbyS.pa))
b.w <- round(S/a.bar, 3)
return(b.w)
}
}
beta.w(doubs)
beta.w <- function(site.by.species = ""){
SbyS.pa <- decostand(site.by.species, method = "pa") # convert to presence-absence
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])     # number of species in the region
a.bar <- mean(specnumber(SbyS.pa))                   # average richness at each site
b.w <- round(S/a.bar, 3)                             # round to 3 decimal places
return(b.w)
}
beta.w <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE){
# ONLY if we specify pairwise as TRUE, do this:
if (pairwise == TRUE){
# As a check, let's print an error if we do not provide needed arguments
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return(NA)}
# If our function made it this far, let's calculate pairwise beta diversity
site1 = site.by.species[sitenum1,]                      # Select site 1
site2 = site.by.species[sitenum2,]                      # Select site 2
site1 = subset(site1, select = site1 > 0)               # Removes absences
site2 = subset(site2, select = site2 > 0)               # Removes absences
gamma = union(colnames(site1), colnames(site2))         # Gamma species pool
s     = length(gamma)                                   # Gamma richness
a.bar = mean(c(specnumber(site1), specnumber(site2)))   # Mean sample richness
b.w   = round(s/a.bar - 1, 3)
return(b.w)
}
# OTHERWISE pairwise defaults to FALSE, so do this, like before:
else{
SbyS.pa <- decostand(site.by.species, method = "pa") # convert to presence-absence
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])     # number of species in region
a.bar <- mean(specnumber(SbyS.pa))                   # average richness at each site
b.w <- round(S/a.bar, 3)
return(b.w)
}
}
beta.w(doubs)
beta.w(doubs, 1)
beta.w(doubs, 1, 2)
beta.w <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE){
# ONLY if we specify pairwise as TRUE, do this:
if (pairwise == TRUE){
# As a check, let's print an error if we do not provide needed arguments
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return(NA)}
# If our function made it this far, let's calculate pairwise beta diversity
site1 = site.by.species[sitenum1,]                      # Select site 1
site2 = site.by.species[sitenum2,]                      # Select site 2
site1 = subset(site1, select = site1 > 0)               # Removes absences
site2 = subset(site2, select = site2 > 0)               # Removes absences
gamma = union(colnames(site1), colnames(site2))         # Gamma species pool
s     = length(gamma)                                   # Gamma richness
a.bar = mean(c(specnumber(site1), specnumber(site2)))   # Mean sample richness
b.w   = round(s/a.bar - 1, 3)
return(b.w)
}
# OTHERWISE pairwise defaults to FALSE, so do this, like before:
else{
SbyS.pa <- decostand(site.by.species, method = "pa") # convert to presence-absence
S <- ncol(SbyS.pa[,which(colSums(SbyS.pa) > 0)])     # number of species in region
a.bar <- mean(specnumber(SbyS.pa))                   # average richness at each site
b.w <- round(S/a.bar, 3)
return(b.w)
}
}
beta.w(doubs, 1, 2)
beta.w(doubs, "1", "2")
doubs <- doubs
beta.w(doubs)
beta.w(doubs$env)
doubs
beta.w(doubs$fish)
beta.w(doubs$fish, 1, 2)
beta.w(doubs$fish, 1, 10)
beta.w(doubs$fish, 1, 2, pairwise = TRUE)
beta.w(doubs$fish, 1, 10, pairwise = TRUE)
fish <- doubs$fish
fish <- fish[-8, ]
fish.dj <- vegdist(fish, method = "jaccard", binary = TRUE)
fish.db <- vegdist(fish, method = "bray")
fish.ds <- vegdist(fish, method = "bray", binary = TRUE)
fish.db
fish.db <- vegdist(fish, method = "bray", upper = TRUE, diag = TRUE)
fish.db
fish.db <- vegdist(fish, method = "bray")
fish.db
fish.ds
order <- rev(attr(fish.db, "Labels"))
levelplot(as.matrix(fish.db)[, order], aspect = "iso", col.regions = inferno,
xlab = "Doubs Site", ylab = "Doubs Site", scales = list(cex = 0.5),
main = "Bray-Curtis Distance")
heatmap <- levelplot(as.matrix(fish.db)[, order], aspect = "iso", col.regions = inferno,
xlab = "Doubs Site", ylab = "Doubs Site", scales = list(cex = 0.5),
main = "Bray-Curtis Distance")
heatmap
fish.ward <- hclust(fish.db, method = "Ward.D2")
fish.ward <- hclust(fish.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
par(mar = c(1, 5, 2, 2) + 0.1)
plot(fish.ward, main = "Doubs River Fish: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
fish.pcoa <- cmdscale(fish.db, eig = TRUE, k = 3)
fish.pcoa
explainvar1 <- round(fish.pcoa$eig[1] / sum(fish.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
explainvar1 <- round(fish.pcoa$eig[1] / sum(fish.pcoa$eig), 3) * 100
explainvar2 <- round(fish.pcoa$eig[2] / sum(fish.pcoa$eig), 3) * 100
explainvar3 <- round(fish.pcoa$eig[3] / sum(fish.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
par(mar = c(5,5,1,2) + 0.1)
plot(fish.pcoa$points[ ,1], fish.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, ced.axis = 1.2, axes = FALSE)
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
plot(fish.pcoa$points[ ,1], fish.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, ced.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
plot(fish.pcoa$points[ ,1], fish.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, ced.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
labels = row.names(fish.pcoa$points))
plot(fish.pcoa$points[ ,1], fish.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
labels = row.names(fish.pcoa$points))
fishREL <- fish
for(i in 1:nrow(fish)){
fishREL[i, ] = fish[i, ] / sum(fish[i, ])
}
fish.pcoa <- add.spec.scores(fish.pcoa, fishREL, method = "pcoa.scores")
package.list <- c('vegan', 'ade4', 'viridis', 'gplots', 'BiodiversityR', 'indicspecies')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
fish.pcoa <- add.spec.scores(fish.pcoa, fishREL, method = "pcoa.scores")
text(fish.pcoa$cproj[ ,1], fish.pcoa$cproj[ ,2],
labels = rownames(fish.pcoa$cproj), col = "black")
plot(fish.pcoa$points[ ,1], fish.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(fish.pcoa$points[ ,1], fish.pcoa$points[ ,2],
labels = row.names(fish.pcoa$points))
#In order to show were particular species would show up on ordination (rather than just site #s), first calculate relative abundances of each species at each site
fishREL <- fish
for(i in 1:nrow(fish)){
fishREL[i, ] = fish[i, ] / sum(fish[i, ])
}
#Calculate and add species scores
fish.pcoa <- add.spec.scores(fish.pcoa, fishREL, method = "pcoa.scores")
text(fish.pcoa$cproj[ ,1], fish.pcoa$cproj[ ,2],
labels = rownames(fish.pcoa$cproj), col = "black")
spe.corr <- add.spec.scores(fish.pcoa, fishREL, method = "cor.scores")$cproj
coocut <- 0.7
corrcut <- 0.7
rm(coocut)
imp.spp <- spe.corr[abs(spe.corr[, 1]) >= corrcut | abs(spe.corr[, 2]) >= corrcut, ]
#Permutation test for species abundances across axes
fit <- envfit(fish.pcoa, fishREL, per = 999)
fit
# note, pleae do not print the dataset when submitting
data(doubs)
str(doubs$env)
doubs
read.table(JellyBeans.Source.txt)
getwd()
read.table("JellyBeans.Source.txt")
Source <- read.table("JellyBeans.Source.txt")
Samples <- read.csv("JellyBeanSampleData.csv")
Samples
ASamples < - read.csv("JellyBeanSampleDataA")
ASamples < - read.csv("JellyBeanSampleDataA")
ASamples < - read.csv("JellyBeanSampleDataA.csv")
SamplesB < - read.csv("JellyBeanSampleDataB.csv")
SamplesB <- read.csv("JellyBeanSampleDataB.csv")
SamplesA <- read.csv("JellyBeanSampleDataA.csv")
SamplesB
SamplesA
beta.w(SamplesB$Site, Diego, Dustin, Lana, Mark, pairwise = TRUE)
beta.w(SamplesB$Site, Diego, Dustin, pairwise = TRUE)
beta.w(SamplesB$Site, 1, 2, 3, 4, pairwise = TRUE)
beta.w(SamplesB$Site, 1, 2, pairwise = TRUE)
beta.w(SamplesB$Site, 1, 2, 3, 4 pairwise = TRUE)
beta.w(SamplesB$Site, 1, 2, 3, 4, pairwise = TRUE)
beta.w(SamplesB$Site, Diego, Dustin, pairwise = TRUE)
beta.w(SamplesB$Site, Lana, Dustin, pairwise = TRUE)
beta.w(SamplesB, Diego, Dustin, pairwise = TRUE)
str(SamplesB)
beta.w(SamplesA)
str(doubs$fish)
doubs$fish
SamplesB2 <- read.csv("JellyBeanSampleDataB2.csv")
beta.w(SamplesB2, 1, 2, pairwise = TRUE)
beta.w(SamplesB2, 1, 2, 3, 4 pairwise = TRUE)
beta.w(SamplesB2, 1, 2, 3, 4, pairwise = TRUE)
beta.w(SamplesB2, 1, 2, pairwise = TRUE)
SamplesA2 <- read.csv("JellyBeanSampleDataA2.csv")
beta.w(SamplesB2, 1, 3, pairwise = TRUE)
beta.w(SamplesB2, 1, 4, pairwise = TRUE)
beta.w(SamplesB2, 1, 5, pairwise = TRUE)
beta.w(SamplesB2, 2, 3, pairwise = TRUE)
beta.w(SamplesB2, 2, 4, pairwise = TRUE)
beta.w(SamplesB2, 3, 4, pairwise = TRUE)
PairwiseSampleB <- c(0.182, 0.19, 0.163, 0.2, 0.268, 0.333)
#Compare all of the sites in A
beta.w(SamplesA2, 1, 2, pairwise = TRUE)
beta.w(SamplesA2, 1, 3, pairwise = TRUE)
beta.w(SamplesA2, 1, 4, pairwise = TRUE)
beta.w(SamplesA3, 1, 5, pairwise = TRUE)
beta.w(SamplesA2, 1, 5, pairwise = TRUE)
beta.w(SamplesA2, 2, 3, pairwise = TRUE)
beta.w(SamplesA2, 2, 4, pairwise = TRUE)
beta.w(SamplesA2, 2, 5, pairwise = TRUE)
beta.w(SamplesA2, 3, 4, pairwise = TRUE)
beta.w(SamplesA2, 3, 5, pairiwse = TRUE)
beta.w(SamplesA2, 3, 5, pairwise = TRUE)
beta.w(SamplesA2, 4, 5, pairwise = TRUE)
PairwiseSamplesA <- c(0.111, 0.182, 0.106, 0.13, 0.171, 0.136, 0.163, 0.209, 0.19, 0.111)
t.test(PairwiseSampleB, PairwiseSamplesA)
Source
vegdist(SamplesA2)
sampleA.db <- vegdist(SamplesA2, method = "bray")
sampleA.pcoa <- cmdscale(sampleA.db, eig = TRUE, k = 3)
sampleA.pcoa
explainvar1 <- round(sampleA.pcoa$eig[1] / sum(sampleA.pcoa$eig), 3) * 100
explainvar2 <- round(sampleA.pcoa$eig[2] / sum(sampleA.pcoa$eig), 3) * 100
explainvar3 <- round(sampleA.pcoa$eig[3] / sum(sampleA.pcoa$eig), 3) * 100
sum.eig2 <- sum(explainvar1, explainvar2, explainvar3)
sum.eig2
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
labels = row.names(fish.pcoa$points))
plot(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
labels = row.names(sampleA.pcoa$points))
sampleB.db <- vegdist(SamplesA2, method = "bray")
sampleB.pcoa <- cmdscale(sampleA.db, eig = TRUE, k = 3)
sampleB.pcoa
explainvar1 <- round(sampleB.pcoa$eig[1] / sum(sampleB.pcoa$eig), 3) * 100
explainvar2 <- round(sampleB.pcoa$eig[2] / sum(sampleB.pcoa$eig), 3) * 100
explainvar3 <- round(sampleB.pcoa$eig[3] / sum(sampleB.pcoa$eig), 3) * 100
sum.eigB <- sum(explainvar1, explainvar2, explainvar3)
sum.eigB
#To do ordination, first define plot parameters
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
labels = row.names(sampleB.pcoa$points))
A.PCoA <- plot(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
labels = row.names(sampleB.pcoa$points))
A.PCoA
sampleB.db <- vegdist(SamplesA2, method = "bray")
sampleB.pcoa <- cmdscale(sampleA.db, eig = TRUE, k = 3)
sampleB.pcoa
explainvar1 <- round(sampleB.pcoa$eig[1] / sum(sampleB.pcoa$eig), 3) * 100
explainvar2 <- round(sampleB.pcoa$eig[2] / sum(sampleB.pcoa$eig), 3) * 100
explainvar3 <- round(sampleB.pcoa$eig[3] / sum(sampleB.pcoa$eig), 3) * 100
sum.eigB <- sum(explainvar1, explainvar2, explainvar3)
sum.eigB
#To do ordination, first define plot parameters
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
labels = row.names(sampleB.pcoa$points))
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
labels = row.names(sampleA.pcoa$points))
sampleB.db <- vegdist(SamplesA2, method = "bray")
sampleB.pcoa <- cmdscale(sampleA.db, eig = TRUE, k = 3)
sampleB.pcoa
Explainvar1 <- round(sampleB.pcoa$eig[1] / sum(sampleB.pcoa$eig), 3) * 100
Explainvar2 <- round(sampleB.pcoa$eig[2] / sum(sampleB.pcoa$eig), 3) * 100
Explainvar3 <- round(sampleB.pcoa$eig[3] / sum(sampleB.pcoa$eig), 3) * 100
sum.eigB <- sum(explainvar1, explainvar2, explainvar3)
sum.eigB
#To do ordination, first define plot parameters
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", Explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", Explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
labels = row.names(sampleB.pcoa$points))
sampleA.db <- vegdist(SamplesA2, method = "bray")
sampleA.pcoa <- cmdscale(sampleA.db, eig = TRUE, k = 3)
sampleA.pcoa
xplainvar1 <- round(sampleA.pcoa$eig[1] / sum(sampleA.pcoa$eig), 3) * 100
xplainvar2 <- round(sampleA.pcoa$eig[2] / sum(sampleA.pcoa$eig), 3) * 100
xplainvar3 <- round(sampleA.pcoa$eig[3] / sum(sampleA.pcoa$eig), 3) * 100
sum.eigA <- sum(explainvar1, explainvar2, explainvar3)
sum.eigA
#To do ordination, first define plot parameters
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", xplainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", xplainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleA.pcoa$points[ ,1], sampleA.pcoa$points[ ,2],
labels = row.names(sampleA.pcoa$points))
sampleB.db <- vegdist(SamplesB2, method = "bray")
sampleB.pcoa <- cmdscale(sampleB.db, eig = TRUE, k = 3)
sampleB.pcoa
Explainvar1 <- round(sampleB.pcoa$eig[1] / sum(sampleB.pcoa$eig), 3) * 100
Explainvar2 <- round(sampleB.pcoa$eig[2] / sum(sampleB.pcoa$eig), 3) * 100
Explainvar3 <- round(sampleB.pcoa$eig[3] / sum(sampleB.pcoa$eig), 3) * 100
sum.eigB <- sum(explainvar1, explainvar2, explainvar3)
sum.eigB
#To do ordination, first define plot parameters
par(mar = c(5,5,1,2) + 0.1)
#Then, initiate plot
plot(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[,2], ylim = c(-0.2, 0.7),
xlab = paste("PCoA 1 (", Explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", Explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
#Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
#Add points and labels
points(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(sampleB.pcoa$points[ ,1], sampleB.pcoa$points[ ,2],
labels = row.names(sampleB.pcoa$points))
