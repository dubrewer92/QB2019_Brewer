abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(pond.pcoa$points[ ,1], pond.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(pond.pcoa$points[ ,1], pond.pcoa$points[ ,2],
labels = row.names(pond.pcoa$points))
#UniFrac distance
dist.uf <- unifrac(comm, phy)
2qwno
env
comm
tax
pd
tax
str(tax)
str(env)
pd
comm
str(comm)
?vegdist()
bc <- vegdist(comm, method = "bray", binary = FALSE, diag = FALSE, upper = FALSE, na.rm = TRUE)
#PCoA based on bray distances
tax.pcoa <- cmdscale(bc, eig = T, k = 3)
tax.pcoa
tax.pcoa <- cmdscale(bc, eig = T, k = 3)
tax.pcoa
#Calculate explpained variation
xplainvar1 <- round(tax.pcoa$eig[1] / sum(tax.pcoa$eig), 3) * 100
xplainvar2 <- round(tax.pcoa$eig[2] / sum(tax.pcoa$eig), 3) * 100
xplainvar3 <- round(tax.pcoa$eig[3] / sum(tax.pcoa$eig), 3) * 100
sum.eig2 <- sum(xplainvar1, xplainvar2, xplainvar3)
# Define Plot Parameters
par(mar = c(5, 5, 1, 2) + 0.1)
# Initiate Plot
plot(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
xlim = c(-0.2, 0.2), ylim = c(-.16, 0.16),
xlab = paste("PCoA 1 (", xplainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", xplainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
labels = row.names(tax.pcoa$points))
bc <- vegdist(comm, method = "bray", binary = FALSE, diag = FALSE, upper = FALSE, na.rm = FALSE)
bc <- vegdist(comm, method = "bray", binary = FALSE, diag = FALSE, upper = FALSE, na.rm = FALSE)
#PCoA based on bray distances
tax.pcoa <- cmdscale(bc, eig = T, k = 3)
tax.pcoa
#Calculate explpained variation
xplainvar1 <- round(tax.pcoa$eig[1] / sum(tax.pcoa$eig), 3) * 100
xplainvar2 <- round(tax.pcoa$eig[2] / sum(tax.pcoa$eig), 3) * 100
xplainvar3 <- round(tax.pcoa$eig[3] / sum(tax.pcoa$eig), 3) * 100
sum.eig2 <- sum(xplainvar1, xplainvar2, xplainvar3)
# Define Plot Parameters
par(mar = c(5, 5, 1, 2) + 0.1)
# Initiate Plot
plot(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
xlim = c(-0.2, 0.2), ylim = c(-.16, 0.16),
xlab = paste("PCoA 1 (", xplainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", xplainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
labels = row.names(tax.pcoa$points))
bc <- vegdist(comm, method = "bray", binary = FALSE, diag = FALSE, upper = FALSE, na.rm = TRUE)
#PCoA based on bray distances
tax.pcoa <- cmdscale(bc, eig = T, k = 3)
tax.pcoa
#Calculate explpained variation
xplainvar1 <- round(tax.pcoa$eig[1] / sum(tax.pcoa$eig), 3) * 100
xplainvar2 <- round(tax.pcoa$eig[2] / sum(tax.pcoa$eig), 3) * 100
xplainvar3 <- round(tax.pcoa$eig[3] / sum(tax.pcoa$eig), 3) * 100
sum.eig2 <- sum(xplainvar1, xplainvar2, xplainvar3)
# Define Plot Parameters
par(mar = c(5, 5, 1, 2) + 0.1)
# Initiate Plot
plot(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
xlim = c(-0.2, 0.2), ylim = c(-.16, 0.16),
xlab = paste("PCoA 1 (", xplainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", xplainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
labels = row.names(tax.pcoa$points))
watershed <- env$Location
# Run PERMANOVA with `adonis()` Function {vegan}
adonis(dist.uf ~ watershed, permutations = 999)
# We can compare to PERMANOVA results based on taxonomy
adonis(
vegdist(                             # create a distance matrix on
decostand(comm, method = "log"),   # log-transformed relative abundances
method = "bray") ~ watershed,      # using Bray-Curtis dissimilarity metric
permutations = 999)
# Run PERMANOVA with `adonis()` Function
adonis(dist.uf ~ watershed, permutations = 999)
adonis(
vegdist(                             # create a distance matrix on
decostand(comm, method = "log"),   # log-transformed relative abundances
method = "bray") ~ watershed,      # using Bray-Curtis dissimilarity metric
permutations = 999)
envs <- env[, 5:19]
# Remove redudnant variables
envs <- envs[, -which(names(envs) %in% c("TDS", "Salinity", "Cal_Volume"))]
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
envs
# Remove redudnant variables
envs <- envs[, -which(names(envs) %in% c("TDS", "Salinity", "Cal_Volume"))]
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
library(vegan)
# Conduct Mantel Test
mantel(dist.uf, env.dist)
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
# Remove redudnant variables
envs <- envs[, -which(names(envs) %in% c("TDS", "Salinity", "Cal_Volume"))]
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
# Define environmental variables related to physical and chemical properties
envs <- env[, 5:19]
mantel(dist.uf, env.dist)
?mantel()
# Conduct Mantel Test
mantel(dist.uf, env.dist, method = "pearson")
library("vegan", lib.loc="~/R/win-library/3.5")
# Conduct Mantel Test
mantel(dist.uf, env.dist)
envs <- env[, 5:19]
# Remove redudnant variables
envs <- envs[, -which(names(envs) %in% c("TDS", "Salinity", "Cal_Volume"))]
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
# Conduct Mantel Test
mantel(dist.uf, env.dist)
# Conduct dbRDA (`vegan`)
ponds.dbrda <- vegan::dbrda(dist.uf ~ ., data = as.data.frame(scale(envs)))
# Permutation tests: axes and environmental variables
anova(ponds.dbrda, by = "axis")
ponds.fit <- envfit(ponds.dbrda, envs, perm = 999)
ponds.fit
# Calculate explained variation
dbrda.explainvar1 <- round(ponds.dbrda$CCA$eig[1] /
sum(c(ponds.dbrda$CCA$eig, ponds.dbrda$CA$eig)), 3) * 100
dbrda.explainvar2 <- round(ponds.dbrda$CCA$eig[2] /
sum(c(ponds.dbrda$CCA$eig, ponds.dbrda$CA$eig)), 3) * 100
# Make dbRDA plot
# Define plot parameters
par(mar = c(5, 5, 4, 4) + 0.1)
# Initiate plot
plot(scores(ponds.dbrda, display = "wa"), xlim = c(-2, 2), ylim = c(-2, 2),
xlab = paste("dbRDA 1 (", dbrda.explainvar1, "%)", sep = ""),
ylab = paste("dbRDA 2 (", dbrda.explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add points & labels
points(scores(ponds.dbrda, display = "wa"),
pch = 19, cex = 3, bg = "gray", col = "gray")
text(scores(ponds.dbrda, display = "wa"),
labels = row.names(scores(ponds.dbrda, display = "wa")), cex = 0.5)
# Add environmental vectors
vectors <- scores(ponds.dbrda, display = "bp")
#row.names(vectors) <- c("Temp", "DO", "chla", "DON")
arrows(0, 0, vectors[,1] * 2, vectors[, 2] * 2,
lwd = 2, lty = 1, length = 0.2, col = "red")
text(vectors[,1] * 2, vectors[, 2] * 2, pos = 3,
labels = row.names(vectors))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 1])) * 2, labels = pretty(range(vectors[, 1])))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 2])) * 2, labels = pretty(range(vectors[, 2])))
adonis(dist.uf ~ watershed, permutations = 999)
adonis(
vegdist(                             # create a distance matrix on
decostand(comm, method = "log"),   # log-transformed relative abundances
method = "bray") ~ watershed,      # using Bray-Curtis dissimilarity metric
permutations = 999)
long.lat <- as.matrix(cbind(env$long, env$lat))
coord.dist <- earth.dist(long.lat, dist = TRUE)
rm(list = ls())
getwd()
library("picante", lib.loc="~/R/win-library/3.5")
library("ape", lib.loc="~/R/win-library/3.5")
library("seqinr", lib.loc="~/R/win-library/3.5")
library("vegan", lib.loc="~/R/win-library/3.5")
library("fossil", lib.loc="~/R/win-library/3.5")
library("reshape", lib.loc="~/R/win-library/3.5")
library("simba", lib.loc="~/R/win-library/3.5")
source("./bin/MothurTools.R")
env <- read.table("data/20130801_PondDataMod.csv", sep = ",", header = TRUE)
env <- na.omit(env)
str(env)
#Load site by species matrix
comm <- read.otu(shared = "./data/INPonds.final.rdp.shared", cutoff = "1")
#Select DNA, disregard cDNA
comm <- comm[grep("*-DNA", rownames(comm)),]
#Perform replacement of all matches
rownames(comm) <- gsub("\\-DNA", "", rownames(comm))
rownames(comm) <- gsub("\\_", "", rownames(comm))
#remove sites not in the environmental data set
comm <- comm[rownames(comm) %in% env$Sample_ID,]
#remove zero-abundance OTUs from data set
comm <- comm[ , colSums(comm) > 0]
#From the source code, take a look at taxonomic information associated with OTU data
tax <- read.tax(taxonomy = "./data/INPonds.final.rdp.1.cons.taxonomy")
#import the alignment file
ponds.cons <- read.alignment(file = "./data/INPonds.final.rdp.1.rep.fasta", format = "fasta")
#rename OTUs
ponds.cons$nam <- gsub("\\|.*$", "", gsub("^.*?\t", "", ponds.cons$nam))
#import the outgroup (archaea)
outgroup <- read.alignment(file = "./data/methanosarcina.fasta", format = "fasta")
#Convert outgroup alignment file to DNAbin
DNAbin <- rbind(as.DNAbin(outgroup), as.DNAbin(ponds.cons))
#have a look at the alignment
image.DNAbin(DNAbin, show.labels=T, cex.lab = 0.05, las = 1)
#make a distance matrix, using 'jukes cantor' model
seq.dist.jc <- dist.dna(DNAbin, model = "JC", pairwise.deletion = FALSE)
#Use the jukes cantor object and make a neighbor-joining tree
phy.all <- bionj(seq.dist.jc)
#Drop tips associated with zero abundance taxa
phy <- drop.tip(phy.all, phy.all$tip.label[!phy.all$tip.label %in%
c(colnames(comm), "Methanosarcina")])
#ID outgroup sequence
outgroup <- match("Methanosarcina", phy$tip.label)
#Root the tree
phy <- root(phy, outgroup, resolve.root = TRUE)
#Plot the rooted tree
par(mar = c(1, 1, 2, 1) + 0.1)
plot.phylo(phy, main = "Neighbor Joining Tree", "phylogram", show.tip.label = FALSE,
use.edge.length = FALSE, direction = "right", cex = 0.6, label.offset = 1)
#Calculate Faith's D and species richness
pd <- pd(comm, phy, include.root = FALSE)
pd
#Make a biplot of species richness and phylogenetic diversity, using a natural logarithm on both axes so that they become comparable (so slope of relationship gives 'power law relationship)
par(mar = c(5, 5, 4, 1) + 0.1)
plot(log(pd$S), log(pd$PD),
pch = 20, col = "red", las = 1,
xlab = "ln(S)", ylab = "ln(PD)", cex.main = 1,
main="Phylodiversity (PD) vs. Taxonomic richness (S)")
# Test the power-law relationship
fit <- lm('log(pd$PD) ~ log(pd$S)')
abline(fit, col = "red", lw = 2)
exponent <- round(coefficients(fit)[2], 2)
legend("topleft", legend=paste("Scaling exponent = ", exponent, sep = ""),
bty = "n", lw = 2, col = "red")
#randomize phylogenetic diversity to create a null model that our data can be compared to, using the picante null model 'richness.'
ses.pd <- ses.pd(comm[1:2,], phy, null.model = "richness", runs = 25,
include.root = FALSE)
#do same, but with null model of 'taxa labels'
ses.pd2 <- ses.pd(comm[1:2,], phy, null.model = "taxa.labels", runs = 25, include.root = FALSE)
ses.pd2
#now with 'frequency'
ses.pd3 <- ses.pd(comm[1:2,], phy, null.model = "frequency", runs = 25, include.root = FALSE)
ses.pd3
?ses.pd()
#Create a phylogenetic distance matrix (which is based on distance between tax on the tree)
phydist <- cophenetic.phylo(phy)
#Estimate standardized effect size of Net Relatedness Index via randomizations
ses.mpd <- ses.mpd(comm, phydist, null.model = "taxa.labels",
abundance.weighted = FALSE, runs = 25)
NRI <- as.matrix(-1 * ((ses.mpd[,2] - ses.mpd[,3]) / ses.mpd[,4]))
rownames(NRI) <- row.names(ses.mpd)
colnames(NRI) <- "NRI"
NRI
#Do the same, but with abundance.weighted = TRUE
ses.mpd2 <- ses.mpd(comm, phydist, null.model = "taxa.labels",
abundance.weighted = TRUE, runs = 25)
NRI2 <- as.matrix(-1 * ((ses.mpd2[,2] - ses.mpd2[,3]) / ses.mpd2[,4]))
rownames(NRI) <- row.names(ses.mpd)
colnames(NRI) <- "NRI2"
NRI2
# Estimate Standardized Effect Size of NRI via Randomization
ses.mntd <- ses.mntd(comm, phydist, null.model = "taxa.labels",
abundance.weighted = FALSE, runs = 25)
# Calculate NTI
NTI <- as.matrix(-1 * ((ses.mntd[,2] - ses.mntd[,3]) / ses.mntd[,4]))
rownames(NTI) <- row.names(ses.mntd)
colnames(NTI) <- "NTI"
NTI
#Do same, but with abundance.weighted as TRUE
ses.mntd2 <- ses.mntd(comm, phydist, null.model = "taxa.labels",
abundance.weighted = TRUE, runs = 25)
# Calculate NTI
NTI2 <- as.matrix(-1 * ((ses.mntd2[,2] - ses.mntd2[,3]) / ses.mntd2[,4]))
rownames(NTI) <- row.names(ses.mntd2)
colnames(NTI) <- "NTI2"
NTI2
#mean pair distance
dist.mp <- comdist(comm, phydist)
#UniFrac distance
dist.uf <- unifrac(comm, phy)
par(mar = c(5, 5, 2, 1) + 0.1)
plot(dist.mp, dist.uf,
pch = 20, col = "red", las = 1, asp = 1, xlim = c(0.15, 0.5), ylim = c(0.15, 0.5),
xlab = "Mean Pair Distance", ylab = "UniFrac Distance")
abline(b = 1, a = 0, lty = 2)
text(0.5, 0.47, "1:1")
#PCoA based on Unifrac distances
pond.pcoa <- cmdscale(dist.uf, eig = T, k = 3)
pond.pcoa
?cmdscale()
#Calculate explpained variation
explainvar1 <- round(pond.pcoa$eig[1] / sum(pond.pcoa$eig), 3) * 100
explainvar2 <- round(pond.pcoa$eig[2] / sum(pond.pcoa$eig), 3) * 100
explainvar3 <- round(pond.pcoa$eig[3] / sum(pond.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)
# Define Plot Parameters
par(mar = c(5, 5, 1, 2) + 0.1)
# Initiate Plot
plot(pond.pcoa$points[ ,1], pond.pcoa$points[ ,2],
xlim = c(-0.2, 0.2), ylim = c(-.16, 0.16),
xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(pond.pcoa$points[ ,1], pond.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(pond.pcoa$points[ ,1], pond.pcoa$points[ ,2],
labels = row.names(pond.pcoa$points))
bc <- vegdist(comm, method = "bray", binary = FALSE, diag = FALSE, upper = FALSE, na.rm = TRUE)
#PCoA based on bray distances
tax.pcoa <- cmdscale(bc, eig = T, k = 3)
tax.pcoa
#Calculate explpained variation
xplainvar1 <- round(tax.pcoa$eig[1] / sum(tax.pcoa$eig), 3) * 100
xplainvar2 <- round(tax.pcoa$eig[2] / sum(tax.pcoa$eig), 3) * 100
xplainvar3 <- round(tax.pcoa$eig[3] / sum(tax.pcoa$eig), 3) * 100
sum.eig2 <- sum(xplainvar1, xplainvar2, xplainvar3)
# Define Plot Parameters
par(mar = c(5, 5, 1, 2) + 0.1)
# Initiate Plot
plot(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
xlim = c(-0.2, 0.2), ylim = c(-.16, 0.16),
xlab = paste("PCoA 1 (", xplainvar1, "%)", sep = ""),
ylab = paste("PCoA 2 (", xplainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "gray", col = "gray")
text(tax.pcoa$points[ ,1], tax.pcoa$points[ ,2],
labels = row.names(tax.pcoa$points))
# Define Environmental Category
watershed <- env$Location
# Run PERMANOVA with `adonis()` Function
adonis(dist.uf ~ watershed, permutations = 999)
# We can compare to PERMANOVA results based on taxonomy
adonis(
vegdist(                             # create a distance matrix on
decostand(comm, method = "log"),   # log-transformed relative abundances
method = "bray") ~ watershed,      # using Bray-Curtis dissimilarity metric
permutations = 999)
# Define environmental variables related to physical and chemical properties
envs <- env[, 5:19]
# Remove redudnant variables
envs <- envs[, -which(names(envs) %in% c("TDS", "Salinity", "Cal_Volume"))]
# Create distance matrix for environmental variables
env.dist <- vegdist(scale(envs), method = "euclid")
# Conduct Mantel Test
mantel(dist.uf, env.dist)
# Conduct dbRDA (`vegan`)
ponds.dbrda <- vegan::dbrda(dist.uf ~ ., data = as.data.frame(scale(envs)))
# Permutation tests: axes and environmental variables
anova(ponds.dbrda, by = "axis")
ponds.fit <- envfit(ponds.dbrda, envs, perm = 999)
ponds.fit
# Calculate explained variation
dbrda.explainvar1 <- round(ponds.dbrda$CCA$eig[1] /
sum(c(ponds.dbrda$CCA$eig, ponds.dbrda$CA$eig)), 3) * 100
dbrda.explainvar2 <- round(ponds.dbrda$CCA$eig[2] /
sum(c(ponds.dbrda$CCA$eig, ponds.dbrda$CA$eig)), 3) * 100
# Make dbRDA plot
# Define plot parameters
par(mar = c(5, 5, 4, 4) + 0.1)
# Initiate plot
plot(scores(ponds.dbrda, display = "wa"), xlim = c(-2, 2), ylim = c(-2, 2),
xlab = paste("dbRDA 1 (", dbrda.explainvar1, "%)", sep = ""),
ylab = paste("dbRDA 2 (", dbrda.explainvar2, "%)", sep = ""),
pch = 16, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add points & labels
points(scores(ponds.dbrda, display = "wa"),
pch = 19, cex = 3, bg = "gray", col = "gray")
text(scores(ponds.dbrda, display = "wa"),
labels = row.names(scores(ponds.dbrda, display = "wa")), cex = 0.5)
# Add environmental vectors
vectors <- scores(ponds.dbrda, display = "bp")
#row.names(vectors) <- c("Temp", "DO", "chla", "DON")
arrows(0, 0, vectors[,1] * 2, vectors[, 2] * 2,
lwd = 2, lty = 1, length = 0.2, col = "red")
text(vectors[,1] * 2, vectors[, 2] * 2, pos = 3,
labels = row.names(vectors))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 1])) * 2, labels = pretty(range(vectors[, 1])))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.2, las = 1, col = "red", lwd = 2.2,
at = pretty(range(vectors[, 2])) * 2, labels = pretty(range(vectors[, 2])))
# Geographic distances (km) among ponds
long.lat <- as.matrix(cbind(env$long, env$lat))
coord.dist <- earth.dist(long.lat, dist = TRUE)
bray.curtis.dist <- 1 - vegdist(comm)
# Phylogenetic similarity among ponds (UniFrac)
unifrac.dist <- 1 - dist.uf
# Transform all distances into list format:
unifrac.dist.ls <- liste(unifrac.dist, entry = "unifrac")
bray.curtis.dist.ls <- liste(bray.curtis.dist, entry = "bray.curtis")
coord.dist.ls <- liste(coord.dist, entry = "geo.dist")
env.dist.ls <- liste(env.dist, entry = "env.dist")
par(mfrow=c(2, 1), mar = c(1, 5, 2, 1) + 0.1, oma = c(2, 0, 0, 0))
# Make plot for taxonomic DD
plot(df$geo.dist, df$bray.curtis, xlab = "", xaxt = "n", las = 1, ylim = c(0.1, 0.9),
ylab="Bray-Curtis Similarity",
main = "Distance Decay", col = "SteelBlue")
par(mfrow=c(2, 1), mar = c(1, 5, 2, 1) + 0.1, oma = c(2, 0, 0, 0))
# Make plot for taxonomic DD
plot(df$geo.dist, df$bray.curtis, xlab = "", xaxt = "n", las = 1, ylim = c(0.1, 0.9),
ylab="Bray-Curtis Similarity",
main = "Distance Decay", col = "SteelBlue")
par(mfrow=c(2, 1), mar = c(1, 5, 2, 1) + 0.1, oma = c(2, 0, 0, 0))
# Make plot for taxonomic DD
plot(df$geo.dist, df$bray.curtis, xlab = "", xaxt = "n", las = 1, ylim = c(0.1, 0.9),
ylab="Bray-Curtis Similarity",
main = "Distance Decay", col = "SteelBlue")
par(mfrow=c(2, 1), mar = c(1, 5, 2, 1) + 0.1, oma = c(2, 0, 0, 0))
# Make plot for taxonomic DD
plot(df$geo.dist, df$bray.curtis, xlab = "", xaxt = "n", las = 1, ylim = c(0.1, 0.9),
ylab="Bray-Curtis Similarity",
main = "Distance Decay", col = "SteelBlue")
par(mar = c(2, 5, 1, 1) + 0.1)
# Make plot for phylogenetic DD
plot(df$geo.dist, df$unifrac, xlab = "", las = 1, ylim = c(0.1, 0.9),
ylab = "Unifrac Similarity", col = "darkorchid4")
df <- data.frame(coord.dist.ls, bray.curtis.dist.ls[, 3], unifrac.dist.ls[, 3],
env.dist.ls[, 3])
names(df)[4:6] <- c("bray.curtis", "unifrac", "env.dist")
# Geographic distances (km) among ponds
long.lat <- as.matrix(cbind(env$long, env$lat))
coord.dist <- earth.dist(long.lat, dist = TRUE)
# Taxonomic similarity among ponds (Bray-Curits distance)
bray.curtis.dist <- 1 - vegdist(comm)
# Phylogenetic similarity among ponds (UniFrac)
unifrac.dist <- 1 - dist.uf
# Transform all distances into list format:
unifrac.dist.ls <- liste(unifrac.dist, entry = "unifrac")
bray.curtis.dist.ls <- liste(bray.curtis.dist, entry = "bray.curtis")
coord.dist.ls <- liste(coord.dist, entry = "geo.dist")
env.dist.ls <- liste(env.dist, entry = "env.dist")
#Create data frame
df <- data.frame(coord.dist.ls, bray.curtis.dist.ls[, 3], unifrac.dist.ls[, 3],
env.dist.ls[, 3])
names(df)[4:6] <- c("bray.curtis", "unifrac", "env.dist")
# Set initial plot parameters
par(mfrow=c(2, 1), mar = c(1, 5, 2, 1) + 0.1, oma = c(2, 0, 0, 0))
# Make plot for taxonomic DD
plot(df$geo.dist, df$bray.curtis, xlab = "", xaxt = "n", las = 1, ylim = c(0.1, 0.9),
ylab="Bray-Curtis Similarity",
main = "Distance Decay", col = "SteelBlue")
# Regression for taxonomic DD
DD.reg.bc <- lm(df$bray.curtis ~ df$geo.dist)
summary(DD.reg.bc)
abline(DD.reg.bc , col = "red4", lwd = 2)
# New plot parameters
par(mar = c(2, 5, 1, 1) + 0.1)
# Make plot for phylogenetic DD
plot(df$geo.dist, df$unifrac, xlab = "", las = 1, ylim = c(0.1, 0.9),
ylab = "Unifrac Similarity", col = "darkorchid4")
# Regression for phylogenetic DD
DD.reg.uni <- lm(df$unifrac ~ df$geo.dist)
summary(DD.reg.uni)
abline(DD.reg.uni, col = "red4", lwd = 2)
# Add x-axis label to plot
mtext("Geographic Distance (km)", side = 1, adj = 0.55,
line = 0.5, outer = TRUE)
diffslope(df$geo.dist, df$unfrac, df$unifrac, df$geo.dist, df$bray.curtis)
diffslope(df$geo.dist, df$unifrac, df$geo.dist, df$bray.curtis)
